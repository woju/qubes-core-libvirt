From eb2259c7e080aa1ec19984e8a02d3efb8e7eb595 Mon Sep 17 00:00:00 2001
From: Marek Marczykowski <marmarek@invisiblethingslab.com>
Date: Fri, 5 Apr 2013 01:41:40 +0200
Subject: [PATCH 03/19] conf: support backend domain name in disk and network
 devices
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
Organization: Invisible Things Lab
Cc: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>

At least Xen supports backend drivers in another domain (aka "driver
domain"). This patch introduces XML config option for such setting as
'domain' attribute of 'source' element. Verification its content is left
for the driver.

In the future same option will be needed for USB devices (hostdev
objects), but for now libxl doesn't have support for PVUSB.

Changes in v2:
 - describe in docs/formatdomain.html.in
 - enforce empty domain tag (only 'name' attribute allowed)

Changes in v3:
 - change <domain name='xx'/> element to domain='' attribute of source
   element - this is more logical place
 - grammar of docs

Changes in v4:
 - revert back to separate element, named <backenddomain name='xx'/>

Signed-off-by: Marek Marczykowski-Górecki <marmarek@invisiblethingslab.com>
---
 docs/formatdomain.html.in     | 29 +++++++++++++++++++++++++++++
 docs/schemas/domaincommon.rng | 16 ++++++++++++++++
 src/conf/domain_conf.c        | 21 +++++++++++++++++++++
 src/conf/domain_conf.h        |  2 ++
 4 files changed, 68 insertions(+)

diff --git a/docs/formatdomain.html.in b/docs/formatdomain.html.in
index c5ad6f4..16d8b5c 100644
--- a/docs/formatdomain.html.in
+++ b/docs/formatdomain.html.in
@@ -2357,6 +2357,13 @@
           </li>
         </ul>
       </dd>
+      <dt><code>backenddomain</code></dt>
+      <dd>The optional <code>backenddomain</code> element allows specifying a backend
+        domain (aka driver domain) for the device. If the real device/file resides
+        in some other domain on the same host, use the <code>name</code>
+        attribute to specify its name.
+        <span class="since">Since 1.2.13 (Xen only)</span>
+      </dd>
       <dt><code>boot</code></dt>
       <dd>Specifies that the disk is bootable. The <code>order</code>
         attribute determines the order in which devices will be tried during
@@ -4235,6 +4242,28 @@ qemu-kvm -net nic,model=? /dev/null
       network device.
       <span class="since">Since 0.9.10 (QEMU and KVM only)</span>.
     </p>
+    <h5><a name="elementDomain">Setting up a network backend in a driver domain</a></h5>
+<pre>
+  ...
+  &lt;devices&gt;
+    ...
+    &lt;interface type='bridge'&gt;
+      &lt;source bridge='br0'/&gt;
+      <b>&lt;backenddomain name='sys-net'/&gt;</b>
+    &lt;/interface&gt;
+    ...
+  &lt;/devices&gt;
+  ...</pre>
+
+    <p>
+      The optional <code>backenddomain</code> element allows specifying a backend
+      domain (aka driver domain) for the device. Use the <code>name</code> attribute
+      to specify its name. You can use it to create a direct network link between
+      domains (so data will not go through host system). Use with type 'ethernet'
+      to create plain network link, or with 'bridge' to connect to some bridge
+      inside the driver domain.
+      <span class="since">Since 1.2.13 (Xen only)</span>
+    </p>
 
     <h5><a name="elementQoS">Quality of service</a></h5>
 
diff --git a/docs/schemas/domaincommon.rng b/docs/schemas/domaincommon.rng
index d467dce..6721431 100644
--- a/docs/schemas/domaincommon.rng
+++ b/docs/schemas/domaincommon.rng
@@ -1127,6 +1127,14 @@
       </optional>
       <ref name="target"/>
       <optional>
+        <element name="backenddomain">
+          <attribute name="name">
+            <ref name="domainName"/>
+          </attribute>
+          <empty/>
+        </element>
+      </optional>
+      <optional>
         <ref name="deviceBoot"/>
       </optional>
       <optional>
@@ -2328,6 +2336,14 @@
         </element>
       </optional>
       <optional>
+        <element name="backenddomain">
+          <attribute name="name">
+            <ref name="domainName"/>
+          </attribute>
+          <empty/>
+        </element>
+      </optional>
+      <optional>
         <element name="model">
           <attribute name="type">
             <data type="string">
diff --git a/src/conf/domain_conf.c b/src/conf/domain_conf.c
index b00f009..1315b70 100644
--- a/src/conf/domain_conf.c
+++ b/src/conf/domain_conf.c
@@ -1261,6 +1261,7 @@ virDomainDiskDefFree(virDomainDiskDefPtr def)
     VIR_FREE(def->vendor);
     VIR_FREE(def->product);
     VIR_FREE(def->script);
+    VIR_FREE(def->domain_name);
     virDomainDeviceInfoClear(&def->info);
 
     VIR_FREE(def);
@@ -1443,6 +1444,7 @@ void virDomainNetDefFree(virDomainNetDefPtr def)
     VIR_FREE(def->backend.vhost);
     VIR_FREE(def->virtPortProfile);
     VIR_FREE(def->script);
+    VIR_FREE(def->domain_name);
     VIR_FREE(def->ifname);
     VIR_FREE(def->ifname_guest);
     VIR_FREE(def->ifname_guest_actual);
@@ -5727,6 +5729,7 @@ virDomainDiskDefParseXML(virDomainXMLOptionPtr xmlopt,
     char *mirrorFormat = NULL;
     char *mirrorType = NULL;
     char *script = NULL;
+    char *domain_name = NULL;
     int expected_secret_usage = -1;
     int auth_secret_usage = -1;
     int ret = 0;
@@ -5795,6 +5798,9 @@ virDomainDiskDefParseXML(virDomainXMLOptionPtr xmlopt,
             } else if (!script &&
                        xmlStrEqual(cur->name, BAD_CAST "script")) {
                 script = virXMLPropString(cur, "path");
+            } else if (!domain_name &&
+                       xmlStrEqual(cur->name, BAD_CAST "backenddomain")) {
+                domain_name = virXMLPropString(cur, "name");
             } else if (xmlStrEqual(cur->name, BAD_CAST "geometry")) {
                 if (virXPathUInt("string(./geometry/@cyls)",
                                  ctxt, &def->geometry.cylinders) < 0) {
@@ -6521,6 +6527,8 @@ virDomainDiskDefParseXML(virDomainXMLOptionPtr xmlopt,
     encryption = NULL;
     def->script = script;
     script = NULL;
+    def->domain_name = domain_name;
+    domain_name = NULL;
     def->serial = serial;
     serial = NULL;
     def->wwn = wwn;
@@ -6584,6 +6592,7 @@ virDomainDiskDefParseXML(virDomainXMLOptionPtr xmlopt,
     VIR_FREE(mirrorType);
     VIR_FREE(mirrorFormat);
     VIR_FREE(script);
+    VIR_FREE(domain_name);
 
     ctxt->node = save_ctxt;
     return def;
@@ -7373,6 +7382,7 @@ virDomainNetDefParseXML(virDomainXMLOptionPtr xmlopt,
     char *mode = NULL;
     char *linkstate = NULL;
     char *addrtype = NULL;
+    char *domain_name = NULL;
     char *vhostuser_mode = NULL;
     char *vhostuser_path = NULL;
     char *vhostuser_type = NULL;
@@ -7511,6 +7521,9 @@ virDomainNetDefParseXML(virDomainXMLOptionPtr xmlopt,
             } else if (!script &&
                        xmlStrEqual(cur->name, BAD_CAST "script")) {
                 script = virXMLPropString(cur, "path");
+            } else if (!domain_name &&
+                       xmlStrEqual(cur->name, BAD_CAST "backenddomain")) {
+                domain_name = virXMLPropString(cur, "name");
             } else if (xmlStrEqual(cur->name, BAD_CAST "model")) {
                 model = virXMLPropString(cur, "type");
             } else if (xmlStrEqual(cur->name, BAD_CAST "driver")) {
@@ -7810,6 +7823,10 @@ virDomainNetDefParseXML(virDomainXMLOptionPtr xmlopt,
         def->script = script;
         script = NULL;
     }
+    if (domain_name != NULL) {
+        def->domain_name = domain_name;
+        domain_name = NULL;
+    }
     if (ifname != NULL) {
         def->ifname = ifname;
         ifname = NULL;
@@ -8067,6 +8084,7 @@ virDomainNetDefParseXML(virDomainXMLOptionPtr xmlopt,
     VIR_FREE(mode);
     VIR_FREE(linkstate);
     VIR_FREE(addrtype);
+    VIR_FREE(domain_name);
     VIR_FREE(trustGuestRxFilters);
     VIR_FREE(ips);
     virNWFilterHashTableFree(filterparams);
@@ -16828,6 +16846,8 @@ virDomainDiskDefFormat(virBufferPtr buf,
 
     virBufferEscapeString(buf, "<script path='%s'/>\n", def->script);
 
+    virBufferEscapeString(buf, "<backenddomain name='%s'/>\n", def->domain_name);
+
     virDomainDiskGeometryDefFormat(buf, def);
     virDomainDiskBlockIoDefFormat(buf, def);
 
@@ -17794,6 +17814,7 @@ virDomainNetDefFormat(virBufferPtr buf,
 
     virBufferEscapeString(buf, "<script path='%s'/>\n",
                           def->script);
+    virBufferEscapeString(buf, "<backenddomain name='%s'/>\n", def->domain_name);
     if (def->ifname &&
         !((flags & VIR_DOMAIN_DEF_FORMAT_INACTIVE) &&
           (STRPREFIX(def->ifname, VIR_NET_GENERATED_PREFIX)))) {
diff --git a/src/conf/domain_conf.h b/src/conf/domain_conf.h
index 19e7dd9..35e463e 100644
--- a/src/conf/domain_conf.h
+++ b/src/conf/domain_conf.h
@@ -701,6 +701,7 @@ struct _virDomainDiskDef {
     int discard; /* enum virDomainDiskDiscard */
     unsigned int iothread; /* unused = 0, > 0 specific thread # */
     char *script;
+    char *domain_name; /* backend domain name */
 };
 
 
@@ -996,6 +997,7 @@ struct _virDomainNetDef {
         unsigned long sndbuf;
     } tune;
     char *script;
+    char *domain_name; /* backend domain name */
     char *ifname;
     char *ifname_guest;
     char *ifname_guest_actual;
-- 
2.1.0

